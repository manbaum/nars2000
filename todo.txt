TO DO:  General:  Important (pre-alpha)
---------------------------------------
* Document MAKEFILE so others may build the product
* Implement )IN and )OUT to enable users to import/export data easily


TO DO:  General:  Less Important (post-alpha)
---------------------------------------------
* Check for stack overflow (recursion depth in parser)
* Finish filling in <startaddr.h> or get it from the executable.
* Check for bison stack overflow
* Allocate bison stack from virtual memory
* Implement Garbage Collection???
* Test implementation limits (stack, FP, Integer, etc.)
* Test _MAXSIZE limits on VirtualAlloc
* Check on freeing intermediate variables on error
* Idiom recognition in the tokenizer???
* Test ± infinity code
* Get permission to redistribute APL385 Unicode or SimPL font
* Reference count on symbol table entries???
* Strings in the symbol table???
* Implement user/session options dialog
* Implement Redo (Ctrl-Y)
* Allow SI Damage to be more forgiving
* Allow [first][-][last] as arg to )LIB/VARS/FNS/OPS/NMS
* Check for overflow on integer addition/multiplication
* Check for 64-bit compile
* Check for updates from the web:  nars2000.org/CurrentRelease.php
* Need an installation program which also sets up file associations for (ws.nars)
* Implement these features:
* ...       selective assignment
* ...       dynamic functions
* ...       magic functions for primitive functions
* ...       magic functions for primitive operators
* ...       magic functions for primitive datatypes
* ...       complex numbers
* ...       quaternions
* ...       octonions
* ...       rational numbers
* ...       array predicates
* ...       syntax highlighting
* ...       control structures
* ...       []L and []R
* ...       expanded set of system functions, to wit:
* ...         []CALL R
* ...       L []CALL R
* ...         []CRL R
* ...         []CRLPC R
* ...         []DEF R
* ...         []DEFL R
* ...       L []EA R    (Execute Alternate) (EAS)
* ...         []EC R
* ...         []ERASE R
* ...         []FI R
* ...       L []FMT R
* ...         []IDLIST R
* ...       L []IDLIST R
* ...         []IDLOC R
* ...         []MF R
* ...       L []MF R
* ...         []SI
* ...         []SINL
* ...       L []SS R
* ...         []STOP R  (Query Stop) (EAS--Optional)
* ...       L []STOP R  (Set Stop) (EAS--Optional)
* ...       L []TF R    (Transfer Form) (EAS)
* ...         []TRACE R (Query Trace) (EAS--Optional)
* ...       L []TRACE R (Set Trace) (EAS--Optional)
* ...         []VI R
* ...         []VR R
* ...       extend associativity to derived functions such as {jot}{dot}+ ???
* ...       component file system
* ...       dyadic down tack jot        (format by example)
* ...       dyadic left shoe            (partitioned enclose)
* ...       dyadic epsilon underbar     (find)
* ...       dieresis-del                (dual)
* ...       dieresis-downtack           (convolution)
* ...       dieresis-star               (power)
* ...       stile-tilde                 (partition)
* ...       vector editor       (requires someone to want it badly enough to code it)
* ...       matrix editor       (requires someone to want it badly enough to code it)
* ...       []IDENTITY:                 (Identity element entry point for user-defined function/operator)
* ...       []INVERSE:          (requires power operator)
* ...       []SINGLETON:        (requires definition of singleton reduction/scan for all primitive functions)
* ...       bracket indexed strand assignment  (B (A[L])){is}R
* ...       bracket indexed modified strand assignment  (B (A[L]))Fcn{is}R
* ...       bracket list indexing        A[L1;...;Ln][M]
* ...       bracket list indexing        A[L1;...;Ln][M1;...;Mn]
* ...       finish []SA
* ...       )COPY :nnn [objs]   to copy objects from another tab
* ...


TO DO:  Session Manager
---------------------
* Ensure APL font is installed
* Language bar to speed entry of APL chars
* When closing a tab, ensure that all threads under it are terminated
* Support different keyboard layouts
*

TO DO:  Options Menu
--------------------
* Fonts
* Syntax Colors
* Tab Colors
* CLEAR WS values
* Directory preferences
* User preferences
*


DONE:  General
--------------
* Demote arrays to a more compact storage type
* Is it a problem that TypeDemote doesn't demote from
  TKT_VARARRAY to TKT_VARIMMED?
* Check floating point accuracy in input and output
* Remove non-"double" code from GSL functions
* Implement scan
* ...       fast Boolean reduction
* ...       fast Boolean scan
* ...       N-wise reduction
* ...       function editing
* ...       dyadic jot with variables (e.g. 3{jot}+)
* ...       f{is}3{jot}+
* ...       (+{jot}(2+3))4
* ...       (+{jot}(2 3))4
* ...       (+{jot} 2 3 )4
* ...       )CLEAR
* ...       )CLOSE
* ...       )COPY
* ...       )DROP
* ...       )EDIT
* ...       )ERASE
* ...       )EXIT
* ...       )FNS
* ...       )LIB
* ...       )LOAD
* ...       )NMS
* ...       )OPS
* ...       )RESET
* ...       )SAVE
* ...       )SI
* ...       )SIC
* ...       )SINL
* ...       )VARS
* ...       )WSID
* ...       function execution
* ...       goto
* ...       goto Line #
* ...       monadic up arrow
* ...       monadic up tack jot
* ...       quad input
* ...       quote-quad input
* ...       error handling ([]ELX)
* ...       event handling ([]ALX)
* ...       Ctrl-Break
* ...       []DR R
* ...       []PROTOTYPE:
* ...       []AV
* ...       []LC
* ...       []DL R
* ...       []NC R
* ...       []UCS R
* ...       []NL R
* ...     L []NL R
* ...     2 []CR R
* ...     1 []CR R
* ...     L []DR R for L=¯2 ¯1 0 1 2
* ...       []ERROR R
* ...       []EM
* ...       []ET
* ...       []ES R
* ...     L []ES R
* ...       monadic right shoe
* ...       dyadic down arrow
* ...       dyadic up arrow
* ...       monadic grade-up
* ...       monadic grade-down
* ...       dyadic grade-up
* ...       dyadic grade-down
* ...       dyadic right shoe
* ...       dyadic down tack
* ...       dyadic up tack
* ...       dyadic squad
* ...       bracket indexing             A[L]
* ...       bracket list indexing        A[L][M]
* ...       bracket list indexing        A[L][M1;...;Mn]
* ...       ambiguous operators
* ...       dyadic epsilon
* ...       monadic iota extended to negative integers
* ...       monadic iota extended to length > 1 vectors
* ...       dyadic iota
* ...       dyadic iota extended to non-vector left args (via an internal magic function)
* ...       dyadic tilde (via an internal magic function)
* ...       monadic down shoe
* ...       bracket indexed assignment   A[L]{is}R
* ...       bracket indexed modified assignment  A[L]Fcn{is}R
* ...       []FC                        (Format Control)
* ...       []EX R
* ...       dyadic down tack jot        (format by specification)
* ...       dyadic dot                  (inner product)
* ...       []FX R
* ...       []IC                        (Indeterminate Control)
* ...       dieresis-jot                (dyadic op  -- rank) (via an internal magic function)
* ...       dieresis-circle             (monadic op -- rank w/Axis)
* []SysVar indexed assignment with range limiting validation
* When adding two empty vectors whose prototypes are
  0 (0 0) and (0 0) 0, the resulting empty vector's prototype
  should be (0 0) (0 0).  Also, the sum of an empty vector
  whose prototype is 0 0 and an empty vector whose prototype
  is 0 0 0 should signal a LENGTH ERROR.
* Fix display of chars wth embedded CRs, LFs, BSs, etc.
* Remove apaLen from APA definition
* Make <dtoa.c> multi-threaded
* Test all occurrences of a list as the right arg to a primitive or system function
* Right double click on the name of a user-defined function/operator
  or available name opens up the function editor
* Axis error if defined function given an axis but not accepting one
* Control chars ([]TCBEL, []TCBS, []TCDEL, []TCESC, []TCFF, []TCHT, []TCLF, []TCNL, and []TCNUL)
  display correctly in simple and nested output.
* Validate indexed assignment to system variables
* Make numeric formatting (through down tack jot) sensitive
  to the local conventions for decimal point, 1000s separator,
  overflow indicator, and negative sign
* Fix display of chars in a saved ws (surround with quotes, etc.)
* Handle multiple SI levels in a saved ws
* Allow negative indices to the axis operator (except for where fractional values are allowed).
* Move registry info into <nars2000.ini> file
* Implement crash Control window
* Unlocalize in reverse order


DONE:  Session Manager
----------------------
* Mouse selection in session manager:  line & sentence
* CUA keystrokes:  e.g. Ctrl-RightArrow, etc.
* Tabs for workspaces
* Implement Undo
* )SAVE as ASCII plain text file
*


DONE:  Bugs
-----------
* Fix error caret position
*


DONE:  Features
---------------
* Function/operator assignment
* Monadic and dyadic rho
* Monadic left shoe (enclose w/axis)
* Monadic and dyadic plus/minus/etc. (w/axis)
* Session manager
* Compose operator
* ± infinity
* Use structured exception handling to change storage
  type on the fly (such as {floor} {infinity})
* Icons at size 48x48 are at point size 32 using typeface Saltino
*


QUESTIONS
---------
* In assignment, can a var overwrite a fn (prim or user), and vice versa
  or must the original object be erased first?  Are there any limitations?
* In function assignment,

  f{is}+/
  g{is}f[1]

  what should <g> reference?  By value or by reference?
  what happens to <g> if we change <f>?
* Should we allow f {is} {jot}fn or {jot}{dot} ?? (right operator)
* Should we allow f {is} {jot}fn               ?? (left operator)
* How should an empty vector display?
  On APL+WIN systems 3.6 + 5.x, '' displays by skipping one blank line
  but 0{rho}{enclose}'' displays without skipping a blank line.
* If a defined function indicates in its header that a result is to be
  returned, should we allow it to exit if that var has not been set?

  What about multiple results such as {del}(Z1 Z2 ...) {is} foo R,
  where Z1 is set, but not Z2?

  What if no Zn is set -- should we allow the function to exit
  with no result as in {del}Z{is}FOO R when Z is unset??
* In an error message ([]DM) which symbol is used for the caret:
  UTF16_CIRCUMFLEX or UTF16_UPCARET??
* With a{is}0{rho}{enclose}0 0
  should either a[]{is}0{rho}{enclose}0 0 0
             or a[;]{is}0{rho}{enclose}0 0 0
  transfer the prototype to the named var?
* Why limit []PP on the high side?
* Should LEFT xxx ERROR caret point to left arg, etc.?
* What to do with format-by-specification on simple char right arg
  (e.g. 5 0{thorn}'abc')?
* In format-by-specification, does automatic width apply across planes
  or is it different within each plane?
* Is there any reason to limit []AV to 256 elements?
* What should be the result of {del} z {is} z foo z ?
* How does Dyalog decide whether or not the result from a primitive function is shy?
* Should {leftrarrow} be interpreted as a (dyadic) function as Dyalog does, e.g. there
  is an example in their manual of {quad}{jot}{leftarrow}{jot}{quad}VR{each}R ?
* Also, what category does {quad} belong to in the above line?
* What is the shape of {domino}scalar?  APL+WIN says ,1 and APL2 says {zilde}
  and the Extended APL Standard's Evaluation Sequence has a bug which
  causes it to signal a LENGTH ERROR.
* What letters of Unicode should be allowed in var/fcn names?
*


File Extensions
---------------

All files specific to NARS will end in the extension ".nars".  There will be a
secondary extension to the left of the global extension such as .ws.nars for
workspaces, (e.g. porsche.ws.nars).

Workspaces              .ws.nars
File Systems            .file.nars
Plugins                 .plugin.nars
Initialization File     .ini


Edge Conditions
---------------
* 2 3{take}[1 2] 45 <==> 2 3{take}[1 2] 1 1{rho}45
* 2 3{drop}[1 2] 45 <==> 2 3{drop}[1 2] 1 1{rho}45
*


Anomalous Results
-----------------
* =/'a' and =\'a' both return 'a' which isn't in the range
  of "=" -- that seems odd.
* Similarly, =\3 0{rho}'' returns its argument with a prototype
  which isn't in the range of the derived function.
* ...


ToDo
----
* Unlocalize in one pass (and clear .Value), and restore
  in another pass to handle duplicate localized names
* Review IBM APL2 Deviations & Restrictions
* Optimize CopyArray_EM by copying the top level only
*

