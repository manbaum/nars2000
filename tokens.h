//***************************************************************************
//  NARS2000 -- Tokens
//***************************************************************************

/*

Tokens are containers  for all sorts of objects such as operators,
functions, variables, grouping symbols, lists, list separators, etc.

Most tokens are simple in that they have type and data only.e,g,
TKT_LPAREN and '('.  Some tokens are complex in that their data
points to other data.

The following tokens are complex:

TKT_VARNAMED This container's tkData is an LPSYMENTRY which names
            a variable.  The LPSYMENTRY may be immediate or not.
            If the latter, stData contains an HGLOBAL which points
            to a simple or nested or hetero array.

TKT_VARIMMED This container's tkData is one of Boolean, Integer,
            Floating Point, or Character as distinguished by
            the value in tkFlags.ImmType.

TKT_LIST    This container's tkData points to an HGLOBAL which
            contains a list array in global memory.

TKT_VARARRAY The main workhorse.  Its tkData is an HGLOBAL which
            contains an array which is either simple, nested, or
            hetero.

TKT_STRAND  Valid only during strand processing after which it
            is converted to TKT_VARARRAY.

TKT_STRING  Valid only during strand processing after which it
            is converted to TKT_VARARRAY.

Outside strand processing, only the tokens TKT_STNAME, TKT_VARIMMED,
TKT_LIST, and TKT_VARARRAY are present in a token which points to a
value.

 */

// Data Token Types
#define TKT_FIRST 1

typedef enum tagTOKEN_TYPES
{TKT_VARNAMED = TKT_FIRST,  //  1: Symbol table entry for a named var (data is LPSYMENTRY)
 TKT_STRING   ,             //  2: String  (data is HGLOBAL)
 TKT_VARIMMED ,             //  3: An immediate constant (Boolean, Integer, Character, or Floating point,
                            //     distinguished by the value in tkFlags.ImmType)
 TKT_COMMENT  ,             //  4: Comment (data is HGLOBAL)
 TKT_ASSIGN   ,             //  5: Assignment symbol (data is UTF16_LEFTARROW)
 TKT_LISTSEP  ,             //  6: List separator    (data is ';')
 TKT_FCNIMMED ,             //  7: An immediate primitive function (data is UTF16_***)
 TKT_OP1IMMED ,             //  8: An immediate monadic primitive operator (data is UTF16_***)
 TKT_OP2IMMED ,             //  9: ...          dyadic  ...
 TKT_JOTDOT   ,             // 10: Outer product monadic operator (with right scope) (data is NULL)
 TKT_LPAREN   ,             // 11: Left paren (data is TKT_LPAREN)
 TKT_RPAREN   ,             // 12: Right ...   ...         RPAREN
 TKT_LBRACKET ,             // 13: Left bracket ...        LBRACKET
 TKT_RBRACKET ,             // 14: Right ...   ...         RBRACKET
 TKT_EOS      ,             // 15: End-of-Stmt (data is length of stmt including this token)
 TKT_EOL      ,             // 16: End-of-Line  ...
 TKT_LINECONT ,             // 17: Line continuation (data is NULL)
 TKT_INPOUT   ,             // 18: Input/Output (data is UTF16_QUAD or UTF16_QUOTEQUAD symbol)

 TKT_LENGTHp1 ,             // 19: Last token type

 // These token types are not generated by <Tokenize_EM>
 //   hence, they never appear in a saved token stream,
 //   only as a parse token created during <ParseLine>.
 TKT_STRAND = TKT_LENGTHp1, // 19: Strand accumulating (data is LPTOKEN)
 TKT_LISTINT  ,             // 20: List intermediate (data is HGLOBAL)
 TKT_LISTPAR  ,             // 21: List in parens    (data is HGLOBAL)
 TKT_LISTBR   ,             // 22: List in brackets  (data is HGLOBAL)
 TKT_VARARRAY ,             // 23: Array of data (data is HGLOBAL)
 TKT_FCNARRAY ,             // 24: Array of functions or monadic operators (data is HGLOBAL)
 TKT_FCNNAMED ,             // 25: Symbol table entry for a named function (data is LPSYMENTRY)
 TKT_AXISIMMED,             // 26: An immediate axis specification (data is immediate)
 TKT_AXISARRAY,             // 27: An array of  ...   (data is HGLOBAL)
 TKT_OP1NAMED ,             // 28: A named monadic primitive operator (data is LPSYMENTRY)
 TKT_OP2NAMED ,             // 29: ...     dyadic  ...
 TKT_STRNAMED ,             // 30: A named strand
} TOKEN_TYPES;

#define TKT_LENGTH      (TKT_LENGTHp1 - 1)

// Whenever changing the above <enum>, be sure to make a
//   corresponding change to <Untokenize> in <exec.c>,
//   <LookaheadDyadicOp>, <LookaheadAdjacent>,
//   <LookaheadSurround>, and <yylex> in <parse.y>,
//   <MakeStrand> in <strand.c>, and
//   <GetTokenTypeName> in <display.c>.


typedef struct tagTKFLAGS
{
    UINT TknType:6,         // 003F:  Data token type (see TOKEN_TYPES)
         ImmType:4,         // 03C0:  Type of immediate data (see IMM_TYPES) (if .Type is TKT_VARIMMED/TKT_FCNIMMED)
         NoDisplay:1,       // 0400:  Do not display this token
         FcnDir:1;          // 0800:  Function is direct (not HGLOBAL)
} TKFLAGS, *LPTKFLAGS;

typedef union tagTOKEN_DATA
{
    struct tagSYMENTRY *lpSym;      // Data is a ptr to a SYMENTRY
    HGLOBAL    tkGlbData;           // ...     an HGLOBAL
    UINT       tkIndex;             // ...     an index
    APLBOOL    tkBoolean;           // ...     an APLBOOL
    APLINT     tkInteger;           // ...     an APLINT
    APLFLOAT   tkFloat;             // ...     a floating point number
    APLCHAR    tkChar;              // ...     an APLCHAR
    LPVOID     lpVoid;              // ...     an abritrary ptr
    APLLONGEST tkLongest;           // Longest datatype (so we can copy the entire data)
} TOKEN_DATA, *LPTOKEN_DATA;

typedef struct tagTOKEN
{
    struct tagTKFLAGS tkFlags;      // The flags part
    TOKEN_DATA        tkData;       // The data part
    int               tkCharIndex;  // Index into the input line of this token
} TOKEN, *LPTOKEN;

#define TOKEN_HEADER_SIGNATURE      'NKOT'

typedef struct tagTOKEN_HEADER
{
    UINT    Signature;              // Token Header signature
    int     iVersion,               // Version # of this header
            iTokenCnt,              // # tokens in lpToken
            iPrevGroup;             // Index of the previous (to the left) grouping symbol
                                    //   (L/R paren, L/R bracket) where the index is relative
                                    //   to the first token after this header.
} TOKEN_HEADER, *LPTOKEN_HEADER;

#define TokenBaseToStart(base)  (LPTOKEN) (((LPCHAR) base) + sizeof (TOKEN_HEADER))

typedef union tagUNION_TOKEN
{
    LPTOKEN        lpBase;          // Locked base of hGlbToken
    LPTOKEN_HEADER lpHeader;        // Token header
} UNION_TOKEN, *LPUNION_TOKEN;


#define FSA_EXIT       -1       // FSA is done
#define FSA_NONCE      -2       // State not specified as yet
#define FSA_SYNTERR    -3       // A SYNTAX ERROR has occurred


//***************************************************************************
//  End of File: tokens.h
//***************************************************************************
